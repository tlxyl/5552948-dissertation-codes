# -*- coding: utf-8 -*-
"""TFM聚类.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12IVKzuiHRXfyvCDOCO0CdvWEPyC3G0f-
"""

import pandas as pd
from sklearn.cluster import KMeans


!pip install scikit-learn-extra
from sklearn_extra.cluster import KMedoids

from sklearn.cluster import AgglomerativeClustering
!pip install scikit-fuzzy
import numpy as np
import skfuzzy as fuzz
from sklearn.metrics import silhouette_score

# Load the data
file_path = 'RFMT.csv'
data = pd.read_csv(file_path)



# Select R, F, M columns for clustering
tfm_data = data[['T_Score', 'F_Score', 'M_Score']]

# Apply K-means clustering with k = 4
kmeans = KMeans(init="random",
                n_clusters=4,
                n_init=10,
                max_iter=300,
                random_state=42)
kmeans_clusters = kmeans.fit_predict(tfm_data)

# Apply K-medoid clustering
kmedoids_pam = KMedoids(n_clusters=4, method='pam', random_state=42)
kmedoids_pam_clusters = kmedoids_pam.fit_predict(tfm_data)

# Apply HAC
agg_clustering = AgglomerativeClustering(n_clusters=4, affinity='euclidean', linkage='ward')
agg_clusters = agg_clustering.fit_predict(tfm_data)

# Apply fuzzy c means clustering
tfm_data_T = tfm_data.values.T
cntr, u, u0, d, jm, p, fpc = fuzz.cluster.cmeans(
    tfm_data_T, 4, 2, error=0.005, maxiter=1000, init=None)
fuzzy_cluster_labels = np.argmax(u, axis=0)

# compute average silhouette_score
agg_silhouette_avg = silhouette_score(tfm_data, agg_clusters)
print(f'agg_Silhouette Score: {agg_silhouette_avg:.3f}')
kmedoids_pam_silhouette_avg = silhouette_score(tfm_data, kmedoids_pam_clusters)
print(f'kmedoids_pam_Silhouette Score: {kmedoids_pam_silhouette_avg:.3f}')
kmeans_silhouette_avg = silhouette_score(tfm_data, kmeans_clusters)
print(f'kmeans_Silhouette Score: {kmeans_silhouette_avg:.3f}')
fuzzy_silhouette_avg = silhouette_score(tfm_data_T.T, fuzzy_cluster_labels)
print(f'fuzzy_Silhouette Score: {fuzzy_silhouette_avg:.3f}')