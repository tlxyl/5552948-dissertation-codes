# -*- coding: utf-8 -*-
"""RFMT_CLUSTERING.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ettEPCIJ9ylL3JqbKIunhel26s89CWxc
"""

import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.patches as mpatches
!pip install plotly
import plotly.express as px
import plotly.graph_objects as go
!pip install scikit-learn-extra
from sklearn_extra.cluster import KMedoids
from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.cluster import AgglomerativeClustering
!pip install scikit-fuzzy
import numpy as np
import skfuzzy as fuzz
from sklearn.metrics import silhouette_score

# Load the data
file_path = 'RFM_clustered.csv'
data = pd.read_csv(file_path)
# Select R, F, M, T columns for clustering
rfmt_data = data[['R_Score', 'F_Score', 'M_Score', 'T_Score']]

# Apply K-means clustering with k = 4
kmeans_RFMT = KMeans(init="random",
                n_clusters=4,
                n_init=10,
                max_iter=300,
                random_state=42)
kmeans_clusters_RFMT = kmeans_RFMT.fit_predict(rfmt_data)


# Add the cluster labels to the original data
data['kmeans_Cluster_RFMT'] = kmeans_clusters_RFMT

# Compute means
kmeans_centroids=data.groupby('kmeans_Cluster_RFMT')[['Transaction_Count', 'Days_Since_Last_Transaction', 'Average_Spending', 'Tenure']].mean()

kmeans_centroids

# Apply K-medoids
kmedoids_pam_RFMT = KMedoids(n_clusters=4, method='pam', random_state=42)
kmedoids_pam_clusters_RFMT = kmedoids_pam_RFMT.fit_predict(rfmt_data)

# Apply HAC
agg_clustering_RFMT = AgglomerativeClustering(n_clusters=5, affinity='euclidean', linkage='ward')
agg_clusters_RFMT = agg_clustering_RFMT.fit_predict(rfmt_data)

# Apply Fuzzy C-Means
rfmt_data_T = rfmt_data.values.T
cntr, u, u0, d, jm, p, fpc = fuzz.cluster.cmeans(
    rfmt_data_T, 4, 2, error=0.005, maxiter=1000, init=None)

# Get clusters' labels
fuzzy_cluster_labels_RFMT = np.argmax(u, axis=0)

# Calculate average silhouette score
agg_silhouette_avg_RFMT = silhouette_score(rfmt_data, agg_clusters_RFMT)
print(f'agg_Silhouette Score_RFMT: {agg_silhouette_avg_RFMT:.3f}')
kmedoids_pam_silhouette_avg_RFMT = silhouette_score(rfmt_data, kmedoids_pam_clusters_RFMT)
print(f'kmedoids_pam_Silhouette_RFMT Score: {kmedoids_pam_silhouette_avg_RFMT:.3f}')
kmeans_silhouette_avg_RFMT = silhouette_score(rfmt_data, kmeans_clusters_RFMT)
print(f'kmeans_Silhouette Score_RFMT: {kmeans_silhouette_avg_RFMT:.3f}')
fuzzy_silhouette_avg_RFMT = silhouette_score(rfmt_data_T.T, fuzzy_cluster_labels_RFMT)
print(f'fuzzy_Silhouette Score: {fuzzy_silhouette_avg_RFMT:.3f}')

# Get subset of data
data_t1 = data[data['T_Score'] == 1]
data_t2 = data[data['T_Score'] == 2]
data_t3 = data[data['T_Score'] == 3]

kmeans_centroids1=data_t1.groupby('kmeans_Cluster_RFMT')[['Transaction_Count', 'Days_Since_Last_Transaction', 'Average_Spending']].mean()
kmeans_centroids2=data_t2.groupby('kmeans_Cluster_RFMT')[['Transaction_Count', 'Days_Since_Last_Transaction', 'Average_Spending']].mean()
kmeans_centroids3=data_t3.groupby('kmeans_Cluster_RFMT')[['Transaction_Count', 'Days_Since_Last_Transaction', 'Average_Spending']].mean()

kmeans_centroids1

kmeans_centroids2

kmeans_centroids3

# Plot 3D scatter


# Define color map
color_discrete_map = {
    0: 'blue',
    1: 'green',
    2: 'red',
    3: 'purple'
}
legend_handles = [mpatches.Patch(color=color, label=f'Cluster {key}') for key, color in color_discrete_map.items()]
#  T_Score = 1
fig1 = plt.figure(figsize=(10, 8))
ax1 = fig1.add_subplot(111, projection='3d')
ax1.scatter(
    data_t1['Transaction_Count'],
    data_t1['Days_Since_Last_Transaction'],
    data_t1['Average_Spending'],
    c=[color_discrete_map[val] for val in data_t1['kmeans_Cluster_RFMT']],
    s=20,
    alpha=0.8
)
ax1.set_title('T_Score = 1', fontsize=14)
ax1.set_xlabel('Transaction Count(F)', fontsize=10)
ax1.set_ylabel('Days Since Last Transaction(R)', fontsize=10)
ax1.set_zlabel('Average Spending(M)', fontsize=10)
ax1.tick_params(axis='x', labelsize=8)
ax1.tick_params(axis='y', labelsize=8)
ax1.tick_params(axis='z', labelsize=8)
ax1.set_box_aspect(aspect=None, zoom=0.8)
ax1.legend(handles=legend_handles, loc='best')
#  T_Score = 2
fig2 = plt.figure(figsize=(10, 8))
ax2 = fig2.add_subplot(111, projection='3d')
ax2.scatter(
    data_t2['Transaction_Count'],
    data_t2['Days_Since_Last_Transaction'],
    data_t2['Average_Spending'],
    c=[color_discrete_map[val] for val in data_t2['kmeans_Cluster_RFMT']],
    s=20,
    alpha=0.8
)
ax2.set_title('T_Score = 2', fontsize=14)
ax2.set_xlabel('Transaction Count(F)', fontsize=10)
ax2.set_ylabel('Days Since Last Transaction(R)', fontsize=10)
ax2.set_zlabel('Average Spending(M)', fontsize=10)
ax2.tick_params(axis='x', labelsize=8)
ax2.tick_params(axis='y', labelsize=8)
ax2.tick_params(axis='z', labelsize=8)
ax2.set_box_aspect(aspect=None, zoom=0.8)
ax2.legend(handles=legend_handles, loc='best')
#  T_Score = 3
fig3 = plt.figure(figsize=(10, 8))
ax3 = fig3.add_subplot(111, projection='3d')
ax3.scatter(
    data_t3['Transaction_Count'],
    data_t3['Days_Since_Last_Transaction'],
    data_t3['Average_Spending'],
    c=[color_discrete_map[val] for val in data_t3['kmeans_Cluster_RFMT']],
    s=20,
    alpha=0.8
)
ax3.set_title('T_Score = 3', fontsize=14)
ax3.set_xlabel('Transaction Count(F)', fontsize=10)
ax3.set_ylabel('Days Since Last Transaction(R)', fontsize=10)
ax3.set_zlabel('Average Spending(M)', fontsize=10)
ax3.tick_params(axis='x', labelsize=8)
ax3.tick_params(axis='y', labelsize=8)
ax3.tick_params(axis='z', labelsize=8)
ax3.set_box_aspect(aspect=None, zoom=0.8)
ax3.legend(handles=legend_handles, loc='best')
# Show plots

plt.show()